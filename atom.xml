<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>宸小曦同学的blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-29T03:26:07.664Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Neil</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java中int与Integer的区别</title>
    <link href="http://yoursite.com/2020/02/29/java%E4%B8%ADint%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/02/29/java%E4%B8%ADint%E4%B8%8EInteger%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-29T03:24:19.291Z</published>
    <updated>2020-02-29T03:26:07.664Z</updated>
    
    <content type="html"><![CDATA[<p>title: java中int与Integer的区别</p><h1 id="java中int与Integer的区别"><a href="#java中int与Integer的区别" class="headerlink" title="java中int与Integer的区别"></a>java中int与Integer的区别</h1><h2 id="两者之间的区别"><a href="#两者之间的区别" class="headerlink" title="两者之间的区别"></a>两者之间的区别</h2><p>1、Integer是int的包装类，int则是java的一种基本数据类型<br>2、Integer变量必须实例化后才能使用，而int变量不需要<br>3、Integer实际是对象的引用，当new一个Integer时，实际上是生成一个指针指向此对象；而int则是直接存储数据值<br>4、Integer的默认值是null，int的默认值是0</p><h2 id="代码示例如下"><a href="#代码示例如下" class="headerlink" title="代码示例如下"></a>代码示例如下</h2><p>1、由于Integer变量实际上是对一个Integer对象的引用，所以两个通过new生成的Integer变量永远是不相等的（因为new生成的是两个对象，其内存地址不同）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer j = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>2、Integer变量和int变量比较时，只要两个变量的值是向等的，则结果为true（因为包装类Integer和基本数据类型int比较时，java会自动拆包装为int，然后进行比较，实际上就变为两个int变量的比较）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">int j = <span class="number">100</span>；</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>3、非new生成的Integer变量和new Integer()生成的变量比较时，结果为false。（因为非new生成的Integer变量指向的是java常量池中的对象，而new Integer()生成的变量指向堆中新建的对象，两者在内存中的地址不同）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">Integer j = <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>4、对于两个非new生成的Integer对象，进行比较时，如果两个变量的值在区间-128到127之间，则比较结果为true，如果两个变量的值不在此区间，则比较结果为false</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Integer i = <span class="number">100</span>;</span><br><span class="line">Integer j = <span class="number">100</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">Integer i = <span class="number">128</span>;</span><br><span class="line">Integer j = <span class="number">128</span>;</span><br><span class="line">System.out.print(i == j); <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>对于第4条的原因：<br>java在编译Integer i = 100 ;时，会翻译成为Integer i = Integer.valueOf(100)；，而java API中对Integer类型的valueOf的定义如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public <span class="keyword">static</span> Integer valueOf(int i)&#123;</span><br><span class="line">    assert IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)&#123;</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>java对于-128到127之间的数，会进行缓存，Integer i = 127时，会将127进行缓存，下次再写Integer j = 127时，就会直接从缓存中取，就不会new了</p><p>如果有错误的地方，还请指正。</p><p>参考： (<a href="http://blog.csdn.net/you23hai45/article/details/50734274" target="_blank" rel="noopener">http://blog.csdn.net/you23hai45/article/details/50734274</a>).<br>            (<a href="http://www.cnblogs.com/liuling/archive/2013/05/05/intAndInteger.html" target="_blank" rel="noopener">http://www.cnblogs.com/liuling/archive/2013/05/05/intAndInteger.html</a>).</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: java中int与Integer的区别&lt;/p&gt;
&lt;h1 id=&quot;java中int与Integer的区别&quot;&gt;&lt;a href=&quot;#java中int与Integer的区别&quot; class=&quot;headerlink&quot; title=&quot;java中int与Integer的区别&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Servlet容器装载Servlet的三种情况</title>
    <link href="http://yoursite.com/2020/02/29/Servlet%E5%AE%B9%E5%99%A8%E8%A3%85%E8%BD%BDServlet%E7%9A%84%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5/"/>
    <id>http://yoursite.com/2020/02/29/Servlet%E5%AE%B9%E5%99%A8%E8%A3%85%E8%BD%BDServlet%E7%9A%84%E4%B8%89%E7%A7%8D%E6%83%85%E5%86%B5/</id>
    <published>2020-02-29T03:24:07.457Z</published>
    <updated>2020-02-29T03:26:34.528Z</updated>
    
    <content type="html"><![CDATA[<p>title: Servlet容器装载Servlet的三种情况</p><h2 id="Servlet容器装载Servlet的三种情况："><a href="#Servlet容器装载Servlet的三种情况：" class="headerlink" title="Servlet容器装载Servlet的三种情况："></a>Servlet容器装载Servlet的三种情况：</h2><p>1.自动装载：某些Servlet如果需要在Servlet容器启动时就加载，需要在web.xml下它的<Servlet>标签里中，添加优先级代码：</p><pre><code>&lt;Servlet&gt;&lt;loadon-startup&gt;1&lt;/loadon-startup&gt;&lt;/Servlet&gt;</code></pre><p>其中数字越小表示该servlet的优先级越高，会先于其他自动装载的优先级较低的先装载<br>2.Servlet容器启动后，客户首次向某个Servlet发送请求时，Tomcat容器会加载它<br>3.当Servlet类文件被更新后，也会重新自动加载</p><h2 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h2><p>1.Servlet是长期驻留在内存里的。当Servlet实例被加载，servlet对象就会长期存在于服务器的内存里，直到服务器关闭。<br>2.Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化。在Servlet的整个生命周期内，init()方法只被调用一次。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: Servlet容器装载Servlet的三种情况&lt;/p&gt;
&lt;h2 id=&quot;Servlet容器装载Servlet的三种情况：&quot;&gt;&lt;a href=&quot;#Servlet容器装载Servlet的三种情况：&quot; class=&quot;headerlink&quot; title=&quot;Servle
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>从尾到头打印列表</title>
    <link href="http://yoursite.com/2020/02/29/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/02/29/%E4%BB%8E%E5%B0%BE%E5%88%B0%E5%A4%B4%E6%89%93%E5%8D%B0%E5%88%97%E8%A1%A8/</id>
    <published>2020-02-29T03:23:57.285Z</published>
    <updated>2020-02-29T03:27:11.703Z</updated>
    
    <content type="html"><![CDATA[<p>title: 从尾到头打印列表</p><h2 id="从尾到头打印列表"><a href="#从尾到头打印列表" class="headerlink" title="从尾到头打印列表"></a>从尾到头打印列表</h2><p><strong>要求：输入一个链表，按链表值从尾到头的顺序返回一个ArrayList。</strong><br>方法一：<br>创建一个栈，先将数组中的元素存储到栈中，再将栈中元素取出放到一个新的数组中。</p><pre><code>public class Solution {    public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {        Stack&lt;Integer&gt; stack=new Stack&lt;&gt;();        while(listNode!=null){            stack.push(listNode.val);            listNode=listNode.next;        }        ArrayList&lt;Integer&gt; list=new ArrayList&lt;&gt;();        while(!stack.isEmpty()){            list.add(stack.pop());        }        return list;    }}</code></pre><p>方法二：递归</p><pre><code>public class Solution {    ArrayList&lt;Integer&gt; arrayList=new ArrayList&lt;Integer&gt;();    public ArrayList&lt;Integer&gt; printListFromTailToHead(ListNode listNode) {        if(listNode!=null){            this.printListFromTailToHead(listNode.next);            arrayList.add(listNode.val);        }        return arrayList;    }}  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: 从尾到头打印列表&lt;/p&gt;
&lt;h2 id=&quot;从尾到头打印列表&quot;&gt;&lt;a href=&quot;#从尾到头打印列表&quot; class=&quot;headerlink&quot; title=&quot;从尾到头打印列表&quot;&gt;&lt;/a&gt;从尾到头打印列表&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;要求：输入一个链表，按链表值从
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>list、set与map的区别</title>
    <link href="http://yoursite.com/2020/02/29/list%E3%80%81set%E4%B8%8Emap%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://yoursite.com/2020/02/29/list%E3%80%81set%E4%B8%8Emap%E7%9A%84%E5%8C%BA%E5%88%AB/</id>
    <published>2020-02-29T03:16:24.150Z</published>
    <updated>2020-02-29T03:18:15.978Z</updated>
    
    <content type="html"><![CDATA[<p>title: list、set与map的区别<br>@<a href="list、set与map的区别">TOC</a></p><h1 id="1-三者之间的区别如下："><a href="#1-三者之间的区别如下：" class="headerlink" title="1.  三者之间的区别如下："></a>1.  三者之间的区别如下：</h1><h3 id="1-元素重复性："><a href="#1-元素重复性：" class="headerlink" title="1) 元素重复性："></a>1) 元素重复性：</h3><p>① List允许有重复的元素。任何数量的重复元素都可以在不影响现有重复元素的值及其索引的情况下插入到List集合中；</p><p>② Set集合不允许元素重复。Set以及所有实现了Set接口的类都不允许重复值的插入，若多次插入同一个元素时，在该集合中只显示一个；</p><p>③ Map以键值对的形式对元素进行存储。Map不允许有重复键，但允许有不同键对应的重复的值；</p><h3 id="2-元素的有序性："><a href="#2-元素的有序性：" class="headerlink" title="2) 元素的有序性："></a>2) 元素的有序性：</h3><p>① List及其所有实现类保持了每个元素的插入顺序；</p><p>② Set中的元素都是无序的；但是某些Set的实现类以某种殊形式对其中的元素进行排序，如：LinkedHashSet按照元素的插入顺序进行排序；</p><p>③ Map跟Set一样对元素进行无序存储，但其某些实现类对元素进行了排序。如：TreeMap根据键对其中的元素进行升序排序；</p><h3 id="3-元素是否为空值："><a href="#3-元素是否为空值：" class="headerlink" title="3) 元素是否为空值："></a>3) 元素是否为空值：</h3><p>① List允许任意数量的空值；</p><p>② Set最多允许一个空值的出现；[ 当向Set集合中添加多个null值时，在该Set集合中只会显示一个null元素]</p><p>③  Map只允许出现一个空键，但允许出现任意数量的空值；</p><p>总结： List中的元素，有序、可重复、可为空；<br>              Set中的元素，无序、不重复、只有一个空元素；<br>          Map中的元素，无序、键不重，值可重、可一个空键、多可空值；</p><h1 id="2-实现类："><a href="#2-实现类：" class="headerlink" title="2.  实现类："></a>2.  实现类：</h1><p>① List：ArrayList、LinkedList；</p><p>② Set：HashSet、LinkedHashSet、TreeSet、SortedSet等等；</p><p>③ Map：HashMap、TreeMap、WeakHashMap、LinkedHashMap、IdentityHashMap等等；</p><h1 id="3-List集合的子类ArrayList、Vector、LinkedList之间的区别："><a href="#3-List集合的子类ArrayList、Vector、LinkedList之间的区别：" class="headerlink" title="3. List集合的子类ArrayList、Vector、LinkedList之间的区别："></a>3. List集合的子类ArrayList、Vector、LinkedList之间的区别：</h1><p>ArrayList和Vector都是以数组的方式存储数据的，此数组长度大于实际存储元素个数，以方便插入元素；它们都允许直接按索引获取元素；由于在插入数据时，涉及到数组元素的移动等内存操作，所以在插入数据时执行速度较慢；Vector是线程安全的(synchronized)，所以性能上要比ArrayList差；</p><p>而LinkedList是以双向链表的形式存储数据的，在按索引获取数据时只需要向前或者向后进行遍历即可；在插入数据时，只需要记录本项的前后项即可，所以插入速度较快。</p><h1 id="4-HashMap和HashTable的区别："><a href="#4-HashMap和HashTable的区别：" class="headerlink" title="4. HashMap和HashTable的区别："></a>4. HashMap和HashTable的区别：</h1><p>HashMap是HashTable的轻量级实现(非线程安全的实现)，它们都实现了Map接口，主要区别在于HashMap允许空(null)键值(key)，由于非线程安全，效率上高于HashTable。</p><p>HashMap允许将null作为一个entry的key或者value，而HashTable不允许。</p><p>HashMap去掉了HashTable的contains方法，改成containsValue和containsKey方法。</p><p>二者最大的不同是，HashTable的方法是synchronized(线程安全的)，而HashMap不是，在多个线程访问HashTable时，不需要自己为它的方法实现同步，而HashMap就必须为之提供外同步。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: list、set与map的区别&lt;br&gt;@&lt;a href=&quot;list、set与map的区别&quot;&gt;TOC&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-三者之间的区别如下：&quot;&gt;&lt;a href=&quot;#1-三者之间的区别如下：&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
